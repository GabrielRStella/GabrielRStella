//https://stackoverflow.com/questions/10406930/how-to-construct-a-websocket-uri-relative-to-the-page-uri

class Color {
  constructor(r, g, b, a) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
    this.isColor = true; //for crappy type checking
  }

  toInt() {
    var cap = 255;
    this.r = Math.floor(this.r * cap);
    this.g = Math.floor(this.g * cap);
    this.b = Math.floor(this.b * cap);
    this.a = Math.floor(this.a * cap);
  }

  toString() {
    return "#" + this.r.toString(16).padStart(2, '0') + this.g.toString(16).padStart(2, '0') + this.b.toString(16).padStart(2, '0') + this.a.toString(16).padStart(2, '0');
  }
}

function randomColor() {
  return new Color(Math.random(), Math.random(), Math.random(), 1);
}

function colorFromString(st) {
  var val = parseInt(st.substr(1), 16);
  var r = (val >> 24) & 255;
  var g = (val >> 16) & 255;
  var b = (val >> 8) & 255;
  var a = (val >> 0) & 255;
  return new Color(r / 255, g / 255, b / 255, a / 255);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//window
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var CANVAS_ELEMENT = document.getElementById("gameCanvas");
var CANVAS = CANVAS_ELEMENT.getContext("2d");

var WIDTH = 0;
var HEIGHT = 0;

var THE_COLOR = randomColor();
THE_COLOR.toInt();
THE_COLOR = THE_COLOR.toString();

var THE_MOUSE = {x: 0, y: 0};
var MOUSE_DOWN = false;

var MS_PER_TICK = 10; //100 ticks per s
var TICKS_PER_SEC = 1000 / MS_PER_TICK;

var PREV_TICK_MS = new Date().getTime();

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var GAME_STARTED = false;
var THE_ID = -1;
var MAX_AGE = 10 * TICKS_PER_SEC;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//events
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function getMousePos(evt) {
  var rect = CANVAS_ELEMENT.getBoundingClientRect();
  return {
    x: evt.clientX - rect.left,
    y: evt.clientY - rect.top
  };
}
CANVAS_ELEMENT.addEventListener('mousemove', function(evt) {
  var mousePos = getMousePos(evt);
  THE_MOUSE = mousePos;
}, false);
CANVAS_ELEMENT.addEventListener('mousedown', function(evt) {
  MOUSE_DOWN = true;
}, false);
CANVAS_ELEMENT.addEventListener('mouseup', function(evt) {
  MOUSE_DOWN = false;
}, false);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//helpers
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function getLine(p1, p2) {
  return {
    id: THE_ID,
    age: 0,
    color: THE_COLOR,
    width: 3,
    start: p1,
    end: p2
  };
}

function createLine(line) {
  sock.send(JSON.stringify(line));
}

function createLineOffline(line) {
  LINES.push(line);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//logic and drawing
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var LINES = [];

var prevMouse = null;
function UPDATE_TICK(tickPart, cbLine) {
  if(MOUSE_DOWN && prevMouse) {
    var line = getLine(prevMouse, THE_MOUSE);
    cbLine(line);
  }
  prevMouse = THE_MOUSE;

  for(var i = 0; i < LINES.length; i++) {
    var line = LINES[i];
    line.age += tickPart;
    if(!line.color.isColor) {
      line.color = colorFromString(line.color);
    }
    line.color.a = 1 - Math.pow((line.age / MAX_AGE), 5); //pow makes it a steeper, more sudden change
    line.color.toInt();
    line.color = line.color.toString();
    if(line.age >= MAX_AGE) {
      LINES.splice(i, 1);
    }
  }
}

function DRAW(ctx) {
  for(var i = 0; i < LINES.length; i++) {
    var line = LINES[i];

    ctx.save();
    ctx.beginPath();
    ctx.moveTo(line.start.x, line.start.y);
    ctx.lineTo(line.end.x, line.end.y);
    ctx.strokeStyle=line.color;
    ctx.lineWidth = line.width;
    ctx.stroke();
    ctx.closePath();
    ctx.restore();
  }

  ctx.beginPath();
  ctx.arc(THE_MOUSE.x, THE_MOUSE.y, 4, 0, Math.PI * 2);
  ctx.fillStyle=THE_COLOR;
  ctx.fill();
  ctx.closePath();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//le update
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function UPDATE() {

  var ms = new Date().getTime();
  var part = (ms - PREV_TICK_MS) / MS_PER_TICK;

  //resize
  if(WIDTH != window.innerWidth || HEIGHT != window.innerHeight) {
    WIDTH = CANVAS_ELEMENT.width = window.innerWidth - 10;
    HEIGHT = CANVAS_ELEMENT.height = window.innerHeight - 10;
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  //---
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////

  CANVAS.setTransform(1, 0, 0, 1, 0, 0);
  CANVAS.clearRect(0, 0, WIDTH, HEIGHT);

  if(!GAME_STARTED) {
    CANVAS.beginPath();
    CANVAS.fillStyle="#000000";
    CANVAS.rect(0, 0, WIDTH, HEIGHT);
    CANVAS.fill();
    CANVAS.closePath();
    //draw a centered text saying 'loading'
  }

  UPDATE_TICK(part, GAME_STARTED ? createLine : createLineOffline);
  DRAW(CANVAS);

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  //---
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////

  PREV_TICK_MS = ms;

  requestAnimationFrame(UPDATE);
}

UPDATE();

//https://developer.mozilla.org/en-US/docs/Web/API/WebSocket
var sock = null;

var CONNECTING = false;
var CONNECTED = false;
connect();

// Connection opened

function connect() {
  if(!CONNECTED && !CONNECTING) {
    CONNECTING = true;
    sock = new WebSocket("ws://localhost:3001");

  sock.addEventListener('open', function (event) {
    CONNECTING = false;
    CONNECTED = true;
  });
  sock.addEventListener('error', function(event) {
    event.preventDefault();
    if(!CONNECTING) {
      setTimeout(connect, 10000); //try every 10 seconds
    }
    CONNECTING = false;
  });
  // Listen for messages
  sock.addEventListener('message', function (event) {
    var data = event.data;
    if(data.startsWith('CMD')) {
      data = data.substr(4);
      if(data.startsWith('ID')) {
        GAME_STARTED = true;
        THE_ID = parseInt(data.substr(3));
      } else if(data.startsWith('MAX_AGE')) {
        MAX_AGE = parseFloat(data.substr(8));
      } else {
        console.log('Received unknown command: ' + data);
      }
    } else {
      LINES.push(JSON.parse(data));
    }
  });

  sock.addEventListener('close', function (event) {
    CONNECTED = false;
    GAME_STARTED = false;
    if(!CONNECTING) {
      setTimeout(connect, 10000); //try every 10 seconds
    }
  });
      
  }
}